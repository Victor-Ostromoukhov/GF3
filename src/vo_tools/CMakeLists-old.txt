project(cmake-openmp)
#cmake_minimum_required(VERSION 2.8)
cmake_minimum_required(VERSION 3.9)


set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# add extra include directories
include_directories(/usr/local/include)


# add extra lib directories
link_directories(/usr/local/opt/libomp/lib /usr/local/lib)

find_package(OpenMP REQUIRED)

if(APPLE)
    message(">>>>>>>>>>>>>>>>>>>>>>>>>>  Setting OpenMP flags on MacOs. Assuming `brew install libomp`")
    if(CMAKE_C_COMPILER_ID MATCHES "Clang\$")
        set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp -I/usr/local/opt/libomp/include" CACHE INTERNAL "OpenMP flags for Xcode toolchain.")
        set(OpenMP_C_LIB_NAMES "omp" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
        set(OpenMP_omp_LIBRARY "/usr/local/opt/libomp/lib/libomp.dylib" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
    endif()

    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang\$")
        set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp -I/usr/local/opt/libomp/include" CACHE INTERNAL "OpenMP flags for Xcode toolchain.")
        set(OpenMP_CXX_LIB_NAMES "omp" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
        set(OpenMP_omp_LIBRARY "/usr/local/opt/libomp/lib/libomp.dylib" CACHE INTERNAL "OpenMP lib name for Xcode toolchain.")
    endif()
endif()

#SET(CMAKE_CXX_FLAGS "-lm -lfftw3 -lfftw3l")

#SET(CMAKE_CXX_FLAGS "-std=c++11 -O3 -fopenmp")

set(INTEGRANDS ../Integration/Cont2D.cpp ../Integration/Gauss1D.cpp ../Integration/Gauss2D.cpp ../Integration/Gauss3D.cpp ../Integration/Gauss4D.cpp ../Integration/Gauss5D.cpp ../Integration/Gauss6D.cpp ../Integration/Gauss8D.cpp ../Integration/Gauss10D.cpp ../Integration/Gauss12D.cpp ../Integration/GaussIso2D.cpp ../Integration/HeaviBell2D.cpp ../Integration/HeaviCont2D.cpp ../Integration/HeaviGauss2D.cpp ../Integration/Heaviside2D.cpp ../Integration/Heaviside3D.cpp ../Integration/Heaviside4D.cpp ../Integration/Heaviside5D.cpp ../Integration/Heaviside6D.cpp ../Integration/Smooth2D.cpp ../Integration/Smooth3D.cpp ../Integration/Smooth4D.cpp ../Integration/SmoothBump2D.cpp)

find_package(OpenMP REQUIRED)

if (OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

set(CMAKE_CXX_FLAGS_DEBUG          "-Og -g -DLOGLEVEL=3 -DPFAEDLE_DBG=1")
set(CMAKE_CXX_FLAGS_MINSIZEREL     "${CMAKE_CXX_FLAGS} -DLOGLEVEL=2")
set(CMAKE_CXX_FLAGS_RELEASE        "${CMAKE_CXX_FLAGS} -DLOGLEVEL=2")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} -g -DLOGLEVEL=3")

#add_library(Integrands STATIC ${INTEGRANDS} )

add_executable(demoCascadedSobol demoCascadedSobol.cpp )
target_link_libraries(demoCascadedSobol PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS demoCascadedSobol DESTINATION ~/bin)

add_executable(getDV4UniformND getDV4UniformND.cpp )
target_link_libraries(getDV4UniformND PRIVATE OpenMP::OpenMP_CXX)
install(TARGETS getDV4UniformND DESTINATION ~/bin)

add_executable(getUniformNDdiscrepancy getUniformNDdiscrepancy.cpp )
target_link_libraries(getUniformNDdiscrepancy PRIVATE OpenMP::OpenMP_CXX)
install(TARGETS getUniformNDdiscrepancy DESTINATION ~/bin)

add_executable(getUniformNDpts getUniformNDpts.cpp )
target_link_libraries(getUniformNDpts PRIVATE OpenMP::OpenMP_CXX)
install(TARGETS getUniformNDpts DESTINATION ~/bin)


add_executable(owen owen.cpp )
target_link_libraries(owen PRIVATE OpenMP::OpenMP_CXX)
install(TARGETS owen DESTINATION ~/bin)

add_executable(integrateSobolPlusPlusND integrateSobolPlusPlusND.cpp )
target_link_libraries(integrateSobolPlusPlusND PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS integrateSobolPlusPlusND DESTINATION ~/bin)

add_executable(integrateND_from_file integrateND_from_file.cpp )
target_link_libraries(integrateND_from_file PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS integrateND_from_file DESTINATION ~/bin)

add_executable(getGeneralizedL2Discrepancy_from_file getGeneralizedL2Discrepancy_from_file.cpp )
target_link_libraries(getGeneralizedL2Discrepancy_from_file PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS getGeneralizedL2Discrepancy_from_file DESTINATION ~/bin)

add_executable(findGoodScreenSpaceSeeds findGoodScreenSpaceSeeds.cpp )
target_link_libraries(findGoodScreenSpaceSeeds PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS findGoodScreenSpaceSeeds DESTINATION ~/bin)

add_executable(getExtensibleLattice2D getExtensibleLattice2D.cpp )
target_link_libraries(getExtensibleLattice2D PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS getExtensibleLattice2D DESTINATION ~/bin)

add_executable(getExtensibleLattice3D getExtensibleLattice3D.cpp )
target_link_libraries(getExtensibleLattice3D PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS getExtensibleLattice3D DESTINATION ~/bin)

add_executable(getExtensibleLattice4D getExtensibleLattice4D.cpp )
target_link_libraries(getExtensibleLattice4D PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS getExtensibleLattice4D DESTINATION ~/bin)

add_executable(getExtensibleLattice6D getExtensibleLattice6D.cpp )
target_link_libraries(getExtensibleLattice6D PRIVATE Integrands OpenMP::OpenMP_CXX)
install(TARGETS getExtensibleLattice6D DESTINATION ~/bin)

###### below: obsolete
#add_executable(owen64 owen64.cpp)
#target_link_libraries(owen64 PRIVATE OpenMP::OpenMP_CXX)
#install(TARGETS owen64 DESTINATION ~/bin)

#add_executable(owen64global owen64global.cpp)
#target_link_libraries(owen64global PRIVATE OpenMP::OpenMP_CXX)
#install(TARGETS owen64global DESTINATION ~/bin)

#add_executable(barycenterFromPts barycenterFromPts)
#target_link_libraries(barycenterFromPts PRIVATE Integrands OpenMP::OpenMP_CXX)

#add_executable(checkerStrat2D checkerStrat2D )
#target_link_libraries(checkerStrat2D PRIVATE Integrands OpenMP::OpenMP_CXX)

#add_executable(checkerStrat4D checkerStrat4D )
#target_link_libraries(checkerStrat4D PRIVATE Integrands OpenMP::OpenMP_CXX)

#add_executable(checkerStrat5D checkerStrat5D )
#target_link_libraries(checkerStrat5D PRIVATE Integrands OpenMP::OpenMP_CXX)

SET(CMAKE_INSTALL_PREFIX $ENV{HOME})
